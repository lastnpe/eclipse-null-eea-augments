class java/util/concurrent/DelayQueue
 <E::Ljava/util/concurrent/Delayed;>
 <E::Ljava/util/concurrent/Delayed;>

super java/util/AbstractQueue
 <TE;>
 <TE;>
super java/util/concurrent/BlockingQueue
 <TE;>
 <TE;>

<init>
 (Ljava/util/Collection<+TE;>;)V
 (Ljava/util/Collection<+TE;>;)V
add
 (TE;)Z
 (T1E;)Z # @Inherited(java.util.AbstractQueue)
drainTo
 (Ljava/util/Collection<-TE;>;)I
 (Ljava/util/Collection<-TE;>;)I
drainTo
 (Ljava/util/Collection<-TE;>;I)I
 (Ljava/util/Collection<-TE;>;I)I
iterator
 ()Ljava/util/Iterator<TE;>;
 ()L1java/util/Iterator<TE;>; # @Inherited(java.util.AbstractCollection)
offer
 (TE;)Z
 (T1E;)Z # @Inherited(java.util.concurrent.BlockingQueue)
offer
 (TE;JLjava/util/concurrent/TimeUnit;)Z
 (TE;JLjava/util/concurrent/TimeUnit;)Z
peek
 ()TE;
 ()T0E; # @Inherited(java.util.Queue)
poll
 ()TE;
 ()T0E; # @Inherited(java.util.Queue)
poll
 (JLjava/util/concurrent/TimeUnit;)TE;
 (JLjava/util/concurrent/TimeUnit;)T0E; # @Inherited(java.util.concurrent.BlockingQueue)
put
 (TE;)V
 (TE;)V
remove
 (Ljava/lang/Object;)Z
 (Ljava/lang/Object;)Z
take
 ()TE;
 ()TE;
toArray
 ()[Ljava/lang/Object;
 ()[1Ljava/lang/Object; # @Inherited(java.util.AbstractCollection)
toArray
 <T:Ljava/lang/Object;>([TT;)[TT;
 <T:Ljava/lang/Object;>([1TT;)[1TT; # @Inherited(java.util.AbstractCollection)
