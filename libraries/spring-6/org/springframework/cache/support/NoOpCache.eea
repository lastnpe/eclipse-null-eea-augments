class org/springframework/cache/support/NoOpCache

<init>
 (Ljava/lang/String;)V
 (Ljava/lang/String;)V
evict
 (Ljava/lang/Object;)V
 (Ljava/lang/Object;)V
evictIfPresent
 (Ljava/lang/Object;)Z
 (Ljava/lang/Object;)Z
get
 (Ljava/lang/Object;)Lorg/springframework/cache/Cache$ValueWrapper;
 (Ljava/lang/Object;)L0org/springframework/cache/Cache$ValueWrapper; # @Inherited(org.springframework.cache.Cache)
get
 <T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/lang/Class<TT;>;)TT;
 <T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/lang/Class<TT;>;)T0T; # @Inherited(org.springframework.cache.Cache)
get
 <T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/util/concurrent/Callable<TT;>;)TT;
 <T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/util/concurrent/Callable<TT;>;)T0T; # @Inherited(org.springframework.cache.Cache)
getName
 ()Ljava/lang/String;
 ()Ljava/lang/String;
getNativeCache
 ()Ljava/lang/Object;
 ()Ljava/lang/Object;
put
 (Ljava/lang/Object;Ljava/lang/Object;)V
 (Ljava/lang/Object;Ljava/lang/Object;)V
putIfAbsent
 (Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/cache/Cache$ValueWrapper;
 (Ljava/lang/Object;Ljava/lang/Object;)L0org/springframework/cache/Cache$ValueWrapper; # @Inherited(org.springframework.cache.Cache)
retrieve
 (Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture<*>;
 (Ljava/lang/Object;)L0java/util/concurrent/CompletableFuture<*>; # @Inherited(org.springframework.cache.Cache)
retrieve
 <T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/util/function/Supplier<Ljava/util/concurrent/CompletableFuture<TT;>;>;)Ljava/util/concurrent/CompletableFuture<TT;>;
 <T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/util/function/Supplier<Ljava/util/concurrent/CompletableFuture<TT;>;>;)Ljava/util/concurrent/CompletableFuture<TT;>;
